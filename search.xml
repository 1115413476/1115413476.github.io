<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>回溯法(DFS算法)</title>
      <link href="/2023/06/01/%E5%9B%9E%E6%BA%AF%E6%B3%95(DFS%E7%AE%97%E6%B3%95)%20/"/>
      <url>/2023/06/01/%E5%9B%9E%E6%BA%AF%E6%B3%95(DFS%E7%AE%97%E6%B3%95)%20/</url>
      
        <content type="html"><![CDATA[<p>简介   </p><blockquote><p> DFS算法：深度优先遍历。回溯法是穷举法的优化    </p></blockquote><p>DFS算法   </p><blockquote><p>二叉树的遍历（前序、中序、后序）。  </p></blockquote><p>回溯法：   </p><blockquote><p>1.判断条件（结束条件）<br>2.for循环中加入递归</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">递归：</span><br><span class="line">1.赋值。判断返回值是什么</span><br><span class="line">2.进入递归(考虑终止条件、要做什么、返回值)</span><br><span class="line">3.删除当前路径</span><br></pre></td></tr></table></figure><p>实战讲解</p><blockquote><p>全排列(力扣46题)</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。 </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> add = [];</span><br><span class="line"> p2 = <span class="function">(<span class="params">nums,index,len</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 终止条件为长度为数组长度 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">if</span>(index == len)&#123;</span><br><span class="line">           <span class="keyword">let</span> a = <span class="title class_">Object</span>.<span class="title function_">assign</span>([] , nums);</span><br><span class="line">            add.<span class="title function_">push</span>(a); <span class="comment">// 执行到最后一个，排序（路径）成</span></span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">let</span> i = index; i&lt; len; i++) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 赋值。ai和an互换 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">             <span class="keyword">let</span> m;</span><br><span class="line">             m = nums[i];</span><br><span class="line">             nums[i] = nums[index];</span><br><span class="line">             nums[index] = m;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 进入递归  , 要做什么</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">       <span class="comment">// 将数组第一个和后面的换过来（选择路径）</span></span><br><span class="line">        <span class="title function_">p2</span>(nums, index+<span class="number">1</span> , len); <span class="comment">// 剩下的自己排序</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 删除当前路径 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">       <span class="keyword">let</span> n;  <span class="comment">// 恢复数组</span></span><br><span class="line">         n = nums[i];</span><br><span class="line">             nums[i] = nums[index];</span><br><span class="line">             nums[index] = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">p2</span>(nums , <span class="number">0</span> ,nums.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">return</span> add;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>DFS和BFS的区别</p><blockquote><p> BFS为层序遍历，使用while循环将一层层数据存入栈中，通过层序pop与push来遍历（复杂度比常规DFS好，DFS可以用记忆法来优化复杂度）</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/01/hello-world/"/>
      <url>/2023/06/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
